"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/experimentmethods";
exports.ids = ["pages/api/experimentmethods"];
exports.modules = {

/***/ "(api)/./pages/api/experimentmethods.js":
/*!****************************************!*\
  !*** ./pages/api/experimentmethods.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nasync function handler(req, res) {\n    if (req.method === \"POST\") {\n        // Get data from your request\n        const data = req.body;\n        try {\n            const response = await fetch(\"http://127.0.0.1:8000/api/experiment-methods/\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(data)\n            });\n            const responseData = await response.json();\n            if (!response.ok) {\n                // Handle error response\n                return res.status(response.status).json(responseData);\n            }\n            // Send a response\n            return res.status(201).json(responseData);\n        } catch (error) {\n            // Handle error during the request\n            return res.status(500).json({\n                error: \"An unexpected error occurred\"\n            });\n        }\n    } else if (req.method === \"GET\") {\n        const [experimentsResponse, processesResponse, equipmentsResponse] = await Promise.all([\n            fetch(\"http://127.0.0.1:8000/api/experiments/\"),\n            fetch(\"http://127.0.0.1:8000/api/processes/\"),\n            fetch(\"http://127.0.0.1:8000/api/equipments/\")\n        ]);\n        const [experimentData, processData, equipmentData] = await Promise.all([\n            experimentsResponse.json(),\n            processesResponse.json(),\n            equipmentsResponse.json()\n        ]);\n        if (!experimentsResponse.ok || !processesResponse.ok || !equipmentsResponse.ok) {\n            // Handle error response\n            return res.status(experimentsResponse.status || processesResponse.status || equipmentsResponse.status).json({\n                error: \"Failed to fetch data\"\n            });\n        }\n        // Send a response\n        return res.status(200).json({\n            experiments: experimentData,\n            processes: processData,\n            equipments: equipmentData\n        });\n    } else {\n        // Handle any other HTTP method\n        res.setHeader(\"Allow\", [\n            \"POST\",\n            \"GET\"\n        ]);\n        res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZXhwZXJpbWVudG1ldGhvZHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLGVBQWVBLFFBQVFDLEdBQUcsRUFBRUMsR0FBRztJQUMxQyxJQUFJRCxJQUFJRSxNQUFNLEtBQUssUUFBUTtRQUN6Qiw2QkFBNkI7UUFDN0IsTUFBTUMsT0FBT0gsSUFBSUksSUFBSTtRQUVyQixJQUFJO1lBQ0YsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLGlEQUFpRDtnQkFDNUVKLFFBQVE7Z0JBQ1JLLFNBQVM7b0JBQ1AsZ0JBQWdCO2dCQUNsQjtnQkFDQUgsTUFBTUksS0FBS0MsU0FBUyxDQUFDTjtZQUN2QjtZQUVBLE1BQU1PLGVBQWUsTUFBTUwsU0FBU00sSUFBSTtZQUV4QyxJQUFJLENBQUNOLFNBQVNPLEVBQUUsRUFBRTtnQkFDaEIsd0JBQXdCO2dCQUN4QixPQUFPWCxJQUFJWSxNQUFNLENBQUNSLFNBQVNRLE1BQU0sRUFBRUYsSUFBSSxDQUFDRDtZQUMxQztZQUVBLGtCQUFrQjtZQUNsQixPQUFPVCxJQUFJWSxNQUFNLENBQUMsS0FBS0YsSUFBSSxDQUFDRDtRQUM5QixFQUFFLE9BQU9JLE9BQU87WUFDZCxrQ0FBa0M7WUFDbEMsT0FBT2IsSUFBSVksTUFBTSxDQUFDLEtBQUtGLElBQUksQ0FBQztnQkFBRUcsT0FBTztZQUErQjtRQUN0RTtJQUNGLE9BQU8sSUFBSWQsSUFBSUUsTUFBTSxLQUFLLE9BQU87UUFDL0IsTUFBTSxDQUFDYSxxQkFBcUJDLG1CQUFtQkMsbUJBQW1CLEdBQUcsTUFBTUMsUUFBUUMsR0FBRyxDQUFDO1lBQ3JGYixNQUFNO1lBQ05BLE1BQU07WUFDTkEsTUFBTTtTQUNQO1FBRUQsTUFBTSxDQUFDYyxnQkFBZ0JDLGFBQWFDLGNBQWMsR0FBRyxNQUFNSixRQUFRQyxHQUFHLENBQUM7WUFDckVKLG9CQUFvQkosSUFBSTtZQUN4Qkssa0JBQWtCTCxJQUFJO1lBQ3RCTSxtQkFBbUJOLElBQUk7U0FFeEI7UUFFRCxJQUFJLENBQUNJLG9CQUFvQkgsRUFBRSxJQUFJLENBQUNJLGtCQUFrQkosRUFBRSxJQUFHLENBQUNLLG1CQUFtQkwsRUFBRSxFQUFFO1lBQzdFLHdCQUF3QjtZQUN4QixPQUFPWCxJQUNKWSxNQUFNLENBQUNFLG9CQUFvQkYsTUFBTSxJQUFJRyxrQkFBa0JILE1BQU0sSUFBSUksbUJBQW1CSixNQUFNLEVBQzFGRixJQUFJLENBQUM7Z0JBQ0pHLE9BQU87WUFDVDtRQUNKO1FBR0Esa0JBQWtCO1FBQ2xCLE9BQU9iLElBQUlZLE1BQU0sQ0FBQyxLQUFLRixJQUFJLENBQUM7WUFDMUJZLGFBQWFIO1lBQ2JJLFdBQVdIO1lBQ1hJLFlBQVlIO1FBRWQ7SUFDRixPQUFPO1FBQ0wsK0JBQStCO1FBQy9CckIsSUFBSXlCLFNBQVMsQ0FBQyxTQUFTO1lBQUM7WUFBUTtTQUFNO1FBQ3RDekIsSUFBSVksTUFBTSxDQUFDLEtBQUtjLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRTNCLElBQUlFLE1BQU0sQ0FBQyxZQUFZLENBQUM7SUFDeEQ7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vcGFnZXMvYXBpL2V4cGVyaW1lbnRtZXRob2RzLmpzPzliNDAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXEsIHJlcykge1xyXG4gICAgaWYgKHJlcS5tZXRob2QgPT09ICdQT1NUJykge1xyXG4gICAgICAvLyBHZXQgZGF0YSBmcm9tIHlvdXIgcmVxdWVzdFxyXG4gICAgICBjb25zdCBkYXRhID0gcmVxLmJvZHk7XHJcbiAgXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cDovLzEyNy4wLjAuMTo4MDAwL2FwaS9leHBlcmltZW50LW1ldGhvZHMvJywge1xyXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgICAgfSk7XHJcbiAgXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gIFxyXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgIC8vIEhhbmRsZSBlcnJvciByZXNwb25zZVxyXG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMocmVzcG9uc2Uuc3RhdHVzKS5qc29uKHJlc3BvbnNlRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgIC8vIFNlbmQgYSByZXNwb25zZVxyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbihyZXNwb25zZURhdGEpO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIC8vIEhhbmRsZSBlcnJvciBkdXJpbmcgdGhlIHJlcXVlc3RcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0FuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQnIH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHJlcS5tZXRob2QgPT09ICdHRVQnKSB7XHJcbiAgICAgIGNvbnN0IFtleHBlcmltZW50c1Jlc3BvbnNlLCBwcm9jZXNzZXNSZXNwb25zZSwgZXF1aXBtZW50c1Jlc3BvbnNlXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICBmZXRjaCgnaHR0cDovLzEyNy4wLjAuMTo4MDAwL2FwaS9leHBlcmltZW50cy8nKSxcclxuICAgICAgICBmZXRjaCgnaHR0cDovLzEyNy4wLjAuMTo4MDAwL2FwaS9wcm9jZXNzZXMvJyksICAgICBcclxuICAgICAgICBmZXRjaCgnaHR0cDovLzEyNy4wLjAuMTo4MDAwL2FwaS9lcXVpcG1lbnRzLycpLFxyXG4gICAgICBdKTtcclxuICBcclxuICAgICAgY29uc3QgW2V4cGVyaW1lbnREYXRhLCBwcm9jZXNzRGF0YSwgZXF1aXBtZW50RGF0YV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgZXhwZXJpbWVudHNSZXNwb25zZS5qc29uKCksXHJcbiAgICAgICAgcHJvY2Vzc2VzUmVzcG9uc2UuanNvbigpLFxyXG4gICAgICAgIGVxdWlwbWVudHNSZXNwb25zZS5qc29uKCksXHJcbiAgICAgICAgXHJcbiAgICAgIF0pO1xyXG4gIFxyXG4gICAgICBpZiAoIWV4cGVyaW1lbnRzUmVzcG9uc2Uub2sgfHwgIXByb2Nlc3Nlc1Jlc3BvbnNlLm9rIHx8IWVxdWlwbWVudHNSZXNwb25zZS5vaykge1xyXG4gICAgICAgIC8vIEhhbmRsZSBlcnJvciByZXNwb25zZVxyXG4gICAgICAgIHJldHVybiByZXNcclxuICAgICAgICAgIC5zdGF0dXMoZXhwZXJpbWVudHNSZXNwb25zZS5zdGF0dXMgfHwgcHJvY2Vzc2VzUmVzcG9uc2Uuc3RhdHVzIHx8IGVxdWlwbWVudHNSZXNwb25zZS5zdGF0dXMpXHJcbiAgICAgICAgICAuanNvbih7XHJcbiAgICAgICAgICAgIGVycm9yOiAnRmFpbGVkIHRvIGZldGNoIGRhdGEnLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgXHJcbiAgICAgIC8vIFNlbmQgYSByZXNwb25zZVxyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xyXG4gICAgICAgIGV4cGVyaW1lbnRzOiBleHBlcmltZW50RGF0YSxcclxuICAgICAgICBwcm9jZXNzZXM6IHByb2Nlc3NEYXRhLFxyXG4gICAgICAgIGVxdWlwbWVudHM6IGVxdWlwbWVudERhdGEsXHJcbiAgICAgICBcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBIYW5kbGUgYW55IG90aGVyIEhUVFAgbWV0aG9kXHJcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ0FsbG93JywgWydQT1NUJywgJ0dFVCddKTtcclxuICAgICAgcmVzLnN0YXR1cyg0MDUpLmVuZChgTWV0aG9kICR7cmVxLm1ldGhvZH0gTm90IEFsbG93ZWRgKTtcclxuICAgIH1cclxuICB9XHJcbiAgIl0sIm5hbWVzIjpbImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJtZXRob2QiLCJkYXRhIiwiYm9keSIsInJlc3BvbnNlIiwiZmV0Y2giLCJoZWFkZXJzIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlc3BvbnNlRGF0YSIsImpzb24iLCJvayIsInN0YXR1cyIsImVycm9yIiwiZXhwZXJpbWVudHNSZXNwb25zZSIsInByb2Nlc3Nlc1Jlc3BvbnNlIiwiZXF1aXBtZW50c1Jlc3BvbnNlIiwiUHJvbWlzZSIsImFsbCIsImV4cGVyaW1lbnREYXRhIiwicHJvY2Vzc0RhdGEiLCJlcXVpcG1lbnREYXRhIiwiZXhwZXJpbWVudHMiLCJwcm9jZXNzZXMiLCJlcXVpcG1lbnRzIiwic2V0SGVhZGVyIiwiZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/experimentmethods.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/experimentmethods.js"));
module.exports = __webpack_exports__;

})();